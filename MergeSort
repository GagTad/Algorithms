#include <iostream>


template <typename T>
void Merge(T arr[], int left, int mid, int right) {
    int i = left;      
    int j = mid + 1;   

    
    while (i <= mid && j <= right) {
       
        if (arr[i] <= arr[j]) {
            i++;
        } else {
            
            T temp = arr[j];
            for (int k = j; k > i; k--) {
                arr[k] = arr[k - 1];
            }
            arr[i] = temp;

            
            i++;
            mid++;
            j++;
        }
    }
}


template <typename T>
void MergeSort(T arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        
        MergeSort(arr, left, mid);
        MergeSort(arr, mid + 1, right);

        
        Merge(arr, left, mid, right);
    }
}


template <typename T>
void PrintArray(const T arr[], int size) {
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
}

int main() {
    
    int arr[] = {12, 11, 13, 5, 6, 7};
    int n = sizeof(arr) / sizeof(arr[0]);

    std::cout << "Original array: ";
    PrintArray(arr, n);

    MergeSort(arr, 0, n - 1);

    std::cout << "Sorted array: ";
    PrintArray(arr, n);

    
    double arr2[] = {3.5, 1.2, 4.8, 2.9, 0.5};
    int m = sizeof(arr2) / sizeof(arr2[0]);
    std::cout<<std::endl;
    std::cout << "Original array: ";
    PrintArray(arr2, m);

    MergeSort(arr2, 0, m - 1);

    std::cout << "Sorted array: ";
    PrintArray(arr2, m);
    
    char arr3[] = {'d','e','a','c','w','g'};
    int k = sizeof(arr3) / sizeof(arr3[0]);

    std::cout<<std::endl;
    
    std::cout << "Original array: ";
    PrintArray(arr3, k);

    MergeSort(arr3, 0, k - 1);

    std::cout << "Sorted array: ";
    PrintArray(arr3, k);

    return 0;
}
